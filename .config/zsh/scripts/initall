#!/usr/bin/python3

import argparse
import os
import platform
import subprocess

class bcolors:
    OKBLUE = '\033[34m'
    OKCYAN = '\033[36m'
    OKGREEN = '\033[32m'
    WARNING = '\033[33m'
    FAIL = '\033[31m'
    ENDC = '\033[0m'
    UNDERLINE = '\033[4m'


# Check the status of Kerberos authentication
# Returns 0 if connected, otherwise non-zero
def kinitStatus():
    kinitStatus = subprocess.run(['klist', '-s'], capture_output=True, text=True)
    if args.debug: print("[dbg] Kerberos status return code: " + str(kinitStatus.returncode))
    return kinitStatus.returncode


# Check the status of Midway authentication
# Returns 0 if connected, otherwise non-zero
def mwinitStatus():
    mwinitStatus = subprocess.run(['mwinit', '-l'], capture_output=True, text=True)
    if args.debug: print("[dbg] Midway status return code: " + str(mwinitStatus.returncode))
    return mwinitStatus.returncode


def vpnStatus():
    vStatus = subprocess.run(['/opt/cisco/anyconnect/bin/vpn', 'status'], capture_output=True, text=True)
    vStatusReturn = 2
    if (vStatus.stdout.find('Disconnected') != -1):
        if args.debug: print("[dbg] VPN status output: " + str(vStatus.stdout))
        vStatusReturn = 1
    if (vStatus.stdout.find('Connected') != -1):
        if args.debug: print("[dbg] VPN status output: " + str(vStatus.stdout))
        vStatusReturn = 0
    if args.debug: print("[dbg] VPN status return code: " + str(vStatus.returncode))
    return vStatusReturn


# Print the status of Kerberos, and Midway authentication
def printStatus(kinitStatus, mwinitStatus):
    print(bcolors.OKBLUE + "  Kerberos:", end=" ")
    if kinitStatus: print(bcolors.FAIL + "Invalid" + bcolors.ENDC)
    else:           print(bcolors.OKGREEN + "Valid" + bcolors.ENDC)

    print(bcolors.OKBLUE + "    Midway:", end=" ")
    if mwinitStatus: print(bcolors.FAIL + "Invalid" + bcolors.ENDC)
    else:            print(bcolors.OKGREEN + "Valid" + bcolors.ENDC)


# Print the status of VPN, Kerberos, and Midway authentication
def printStatusWithVPN(kinitStatus, mwinitStatus, vStatus):
    print(bcolors.OKBLUE + "       VPN:", end=" ")
    if vStatus: print(bcolors.FAIL + "Disconnected" + bcolors.ENDC)
    else:       print(bcolors.OKGREEN + "Connected" + bcolors.ENDC)

    print(bcolors.OKBLUE + "  Kerberos:", end=" ")
    if kinitStatus: print(bcolors.FAIL + "Invalid" + bcolors.ENDC)
    else:           print(bcolors.OKGREEN + "Valid" + bcolors.ENDC)

    print(bcolors.OKBLUE + "    Midway:", end=" ")
    if mwinitStatus: print(bcolors.FAIL + "Invalid" + bcolors.ENDC)
    else:            print(bcolors.OKGREEN + "Valid" + bcolors.ENDC)


# Authenticate using 'kinit'
# Returns 0 if successful, otherwise non-zero
def kAuth():
    print(os.getlogin() + "@ANT.AMAZON.COM's password:")

    kinit = subprocess.run('kinit', capture_output=True, text=True)

    # Hardcoded string checks from kinit output
    if (kinit.stderr.find('Password incorrect') != -1):
        print("Authentication failed")
    elif (kinit.stderr.find('unable to reach') != -1):
        print("No KDC found - check VPN connection")
        # Set the return code to success so we don't try again
        kinit.returncode = 0
    else:
        print("Successfully authenticated")
    if args.debug: print("[dbg] Kerberos authentication return code: " + str(kinit.returncode))
    if args.debug: print("[dbg] kinit.stderr: " + kinit.stderr)
    return kinit.returncode


# Authenticate using 'mwinit'
# Returns 0 if successful, otherwise non-zero
def mwAuth(platform):
    # Dev desktop requires different flags for mwinit
    if platform == "Darwin":
        # We're on Mac
        cmd = ['mwinit', '-s', '--aea']
    elif platform == "Linux":
        # We're on Linux
        cmd = ['mwinit', '-s', '-o']
    else:
        # Not sure, just run mwinit with Sentry
        cmd = ['mwinit', '-s']
    mwinit = subprocess.run(cmd)
    if args.debug: print("[dbg] Midway authentication return code: " + str(mwinit.returncode))
    return mwinit.returncode


def printHeader(header):
    print(bcolors.OKBLUE + "\n=== " + header + "===" + bcolors.ENDC)


# Arg parser
parser = argparse.ArgumentParser(description=
    'Connect to VPN and authenticate Kerberos and Midway.\n\n' + \
        'Note: The \'-onetouch\' option will only work on Mac systems and requires passwords to\n'
        '      be stored in the default Mac password keychain under the following services:\n' + \
        '      - midway_pin\n' + \
        '      - amzn_pwd\n\n' + \
        'Passwords can be added using the following command:\n' + \
        '   security add-generic-password -a <user> -s <service> -w',
    formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-s', '--status', action='store_true', help='Show authentication status only')
parser.add_argument('-o', '--onetouch', action='store_true', help='Authenticate with onetouch')
parser.add_argument('-f', '--force', action='store_true', help='Force authentication')
parser.add_argument('-d', '--debug', action='store_true', help='Print debug information')

args = parser.parse_args()

platform = platform.system()

# If on macOS and force is not specified, assume onetouch.
if platform == "Darwin" and not args.force:
    args.onetouch = True
if platform == "Linux" and args.onetouch:
    print(bcolors.WARNING \
        + "Onetouch authentication not supported on Linux. Defaulting to regular authentication.\n" \
        + bcolors.ENDC)
    args.onetouch = False

print(bcolors.OKBLUE \
    + "Hello! Your current authentication status is:" \
    + bcolors.ENDC)

# Get the platform
# Print the current status
kStatus = kinitStatus()
mwStatus = mwinitStatus()
if platform == "Darwin":
    vStatus = vpnStatus()
    printStatusWithVPN(kStatus, mwStatus, vStatus)
else:
    printStatus(kStatus, mwStatus)

if args.status:
    exit(0)

if args.onetouch:
    userHome = os.path.expanduser('~')
    if vStatus or args.force:
        printHeader("VPN Connection")
        vpn = subprocess.run(['expect', userHome + '/.config/zsh/scripts/mac/vpn-onetouch'])
    if kStatus or args.force:
        printHeader("Kerberos Authentication")
        kinit = subprocess.run(['expect', userHome + '/.config/zsh/scripts/mac/kinit-onetouch'])
    if mwStatus or args.force:
        printHeader("Midway Authentication")
        mwinit = subprocess.run(['expect', userHome + '/.config/zsh/scripts/mac/mwinit-onetouch'])
    exit(0)

# Authenticate with Kerberos
if kStatus or args.force:
    printHeader("Kerberos Authentication")
    while True:
        if kAuth() == 0:
            break;

# Authenticate with Midway
if mwStatus or args.force:
    printHeader("Midway Authentication")
    while True:
        if mwAuth(platform) == 0:
            break;

exit(0)
