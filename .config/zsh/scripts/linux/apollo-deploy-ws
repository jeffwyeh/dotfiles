#!/usr/bin/python3

import argparse
import json
import os
import re
import subprocess
import sys

from util.apollo import bcolors
from util.apollo import print_subprocess_error
from util.apollo import wait_for_deployment

parser = argparse.ArgumentParser(description=
        'Deploy the versionset of the current workspace to an Apollo\n'\
                'environment.\n'\
                '\n'\
                'This script takes a given Apollo environment name and stage\n'\
                'and deploys the current workspace\'s versionset to a child\n'\
                'environment with the user\'s alias.',
        formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('env', type=str, help='Environment name')
parser.add_argument('stage', type=str, help='Environment stage')

args = parser.parse_args()

user = os.getlogin()
brazil_ws_show = subprocess.run(['brazil', 'ws', 'show'],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)

if brazil_ws_show.stderr:
    print(bcolors.FAIL + brazil_ws_show.stderr.decode('utf-8') + bcolors.ENDC)
    sys.exit(1)

vs = brazil_ws_show.stdout.decode('utf-8')
vs = re.search(r"(?<=Version Set:).*?(?=\n)", vs).group(0).strip()
vs = vs.replace('@', '@B')

child_env = args.env + '/' +  user + '/' + args.stage

print(bcolors.OKGREEN \
        + "Deploying " \
        + vs \
        + " to " \
        + child_env \
        + bcolors.ENDC)

apollo_deploy = subprocess.run(
        [
            '/apollo/env/ApolloCommandLine/bin/apollo',
            'deploy',
            '--version-set-revision',
            vs,
            child_env
        ],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)

if apollo_deploy.stderr:
    print_subprocess_error(apollo_deploy)
    sys.exit(1)

result_json = json.loads(apollo_deploy.stdout.decode('utf-8'))
deployment_id = str(result_json['deployment_id'])

print(bcolors.OKGREEN \
        + 'Created deployment https://apollo.amazon.com/deployments/' \
        + deployment_id \
        + bcolors.ENDC)

result = wait_for_deployment(deployment_id)

if result == 0:
    print(bcolors.OKGREEN \
            + 'Successfully deployed ' \
            + vs \
            + ' to ' \
            + child_env \
            + bcolors.ENDC)
else:
    print(bcolors.FAIL \
            + 'Failed to deploy ' \
            + vs \
            + ' to ' \
            + child_env \
            + bcolors.ENDC)

sys.exit(result)

